Tables:

Books:
book_id (INT PRIMARY KEY): Unique identifier for each book
title (VARCHAR(255) NOT NULL): Title of the book
author_id (INT FOREIGN KEY REFERENCES Authors(author_id)): ID of the author(s) (FK)
genre (VARCHAR(50)): Genre of the book
publication_date (DATE): Publication date of the book
price (DECIMAL(8,2)): Price of the book
inventory (INT): Current inventory level

Authors:
author_id (INT PRIMARY KEY): Unique identifier for each author
first_name (VARCHAR(50) NOT NULL): Author's first name
last_name (VARCHAR(50) NOT NULL): Author's last name
biography (TEXT): Optional biography of the author

Customers:
customer_id (INT PRIMARY KEY): Unique identifier for each customer
first_name (VARCHAR(50) NOT NULL): Customer's first name
last_name (VARCHAR(50) NOT NULL): Customer's last name
email (VARCHAR(100) UNIQUE): Customer's email address (Unique)
phone_number (VARCHAR(20)): Customer's phone number

Orders:
order_id (INT PRIMARY KEY): Unique identifier for each order
customer_id (INT FOREIGN KEY REFERENCES Customers(customer_id)): ID of the customer who placed the order (FK)
order_date (DATETIME NOT NULL): Date and time the order was placed
order_status (ENUM('Placed', 'Shipped', 'Delivered', 'Cancelled')): Status of the order

Relationships:
One book can have multiple authors (Many-to-Many relationship between Books and Authors).
One customer can place multiple orders (One-to-Many relationship between Customers and Orders).
One order can contain multiple books (Many-to-Many relationship between Orders and Books, implemented with an additional table if needed).

Constraints:
Primary key and foreign key constraints to ensure data integrity.
NOT NULL constraints for required fields.
UNIQUE constraint on customer email.

1. Top-Selling Books:
SELECT title, SUM(quantity) AS total_sold
FROM (
  SELECT book_id, quantity
  FROM Orders o
  JOIN OrderItems oi ON o.order_id = oi.order_id
) AS order_items
JOIN Books b ON b.book_id = order_items.book_id
GROUP BY title
ORDER BY total_sold DESC
LIMIT 10;

2. Total Sales Revenue for a Period:
SELECT SUM(price * quantity) AS total_revenue
FROM (
  SELECT book_id, quantity
  FROM Orders o
  JOIN OrderItems oi ON o.order_id = oi.order_id
  WHERE order_date BETWEEN '2024-01-01' AND '2024-02-14' -- Replace with your desired date range
) AS order_items
JOIN Books b ON b.book_id = order_items.book_id;
